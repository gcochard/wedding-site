{
  "name": "blueimp-gallery",
  "version": "2.9.0",
  "title": "blueimp Gallery",
  "description": "blueimp Gallery is a touch-enabled, responsive and customizable image and video gallery, carousel and lightbox, optimized for both mobile and desktop web browsers. It features swipe, mouse and keyboard navigation, transition effects, slideshow functionality, fullscreen support and on-demand content loading and can be extended to display additional content types.",
  "keywords": [
    "image",
    "video",
    "gallery",
    "carousel",
    "lightbox",
    "mobile",
    "desktop",
    "touch",
    "responsive",
    "swipe",
    "mouse",
    "keyboard",
    "navigation",
    "transition",
    "effects",
    "slideshow",
    "fullscreen"
  ],
  "homepage": "https://github.com/blueimp/Gallery",
  "author": {
    "name": "Sebastian Tschan",
    "url": "https://blueimp.net"
  },
  "maintainers": [
    {
      "name": "Sebastian Tschan",
      "url": "https://blueimp.net"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/blueimp/Gallery.git"
  },
  "bugs": "https://github.com/blueimp/Gallery/issues",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "devDependencies": {
    "uglify-js": "2.4.0",
    "less": "1.4.2"
  },
  "main": [
    "./css/blueimp-gallery.css",
    "./css/blueimp-gallery-indicator.css",
    "./css/blueimp-gallery-video.css",
    "./img/error.png",
    "./img/error.svg",
    "./img/loading.gif",
    "./img/play-pause.png",
    "./img/play-pause.svg",
    "./img/video-play.png",
    "./img/video-play.svg",
    "./js/blueimp-helper.js",
    "./js/blueimp-gallery.js",
    "./js/blueimp-gallery-fullscreen.js",
    "./js/blueimp-gallery-indicator.js",
    "./js/blueimp-gallery-video.js"
  ],
  "gitHead": "739a438f8c0d1173b7cf54cf5aa5b344ee57c16e",
  "readme": "# blueimp Gallery\n\n- [Demo](#demo)\n- [Description](#description)\n- [Setup](#setup)\n    - [Lightbox setup](#lightbox-setup)\n    - [Controls](#controls)\n    - [Carousel setup](#carousel-setup)\n- [Keyboard shortcuts](#keyboard-shortcuts)\n- [Options](#options)\n    - [Default options](#default-options)\n    - [Event callbacks](#event-callbacks)\n    - [Carousel options](#carousel-options)\n    - [Indicator options](#indicator-options)\n    - [Fullscreen options](#fullscreen-options)\n    - [Video factory options](#video-factory-options)\n    - [Container and element options](#container-and-element-options)\n    - [Property options](#property-options)\n- [API](#api)\n    - [Initialization](#initialization)\n    - [API methods](#api-methods)\n    - [Videos](#videos)\n        - [Multiple video sources](#multiple-video-sources)\n    - [Additional Gallery elements](#additional-gallery-elements)\n    - [Additional content types](#additional-content-types)\n        - [Example HTML text factory implementation](#example-html-text-factory-implementation)\n    - [jQuery plugin](#jquery-plugin)\n        - [jQuery plugin setup](#jquery-plugin-setup)\n        - [HTML5 data-attributes](#html5-data-attributes)\n        - [Container ids and link grouping](#container-ids-and-link-grouping)\n        - [Gallery object](#gallery-object)\n        - [jQuery events](#jquery-events)\n- [Requirements](#requirements)\n- [Browsers](#browsers)\n    - [Desktop browsers](#desktop-browsers)\n    - [Mobile browsers](#mobile-browsers)\n- [License](#license)\n- [Credits](#credits)\n\n## Demo\n[blueimp Gallery Demo](http://blueimp.github.io/Gallery/)\n\n## Description\nblueimp Gallery is a touch-enabled, responsive and customizable image and video gallery, carousel and lightbox, optimized for both mobile and desktop web browsers.  \nIt features swipe, mouse and keyboard navigation, transition effects, slideshow functionality, fullscreen support and on-demand content loading and can be extended to display additional content types.\n\n## Setup\n\n### Lightbox setup\nCopy the **css**, **img** and **js** directories to your website.\n\nInclude the Gallery stylesheet in the head section of your webpage:\n\n```html\n<link rel=\"stylesheet\" href=\"css/blueimp-gallery.min.css\">\n```\n\nAdd the following HTML snippet with the Gallery widget to the body of your webpage:\n\n```html\n<!-- The Gallery as lightbox dialog, should be a child element of the document body -->\n<div id=\"blueimp-gallery\" class=\"blueimp-gallery\">\n    <div class=\"slides\"></div>\n    <h3 class=\"title\"></h3>\n    <a class=\"prev\">‹</a>\n    <a class=\"next\">›</a>\n    <a class=\"close\">×</a>\n    <a class=\"play-pause\"></a>\n    <ol class=\"indicator\"></ol>\n</div>\n```\n\nInclude the Gallery script at the bottom of the body of your webpage:\n\n```html\n<script src=\"js/blueimp-gallery.min.js\"></script>\n```\n\nCreate a list of links to image files, optionally with enclosed thumbnails and add them to the body of your webpage, before including the Gallery script:\n\n```html\n<div id=\"links\">\n    <a href=\"images/banana.jpg\" title=\"Banana\">\n        <img src=\"images/thumbnails/banana.jpg\" alt=\"Banana\">\n    </a>\n    <a href=\"images/apple.jpg\" title=\"Apple\">\n        <img src=\"images/thumbnails/apple.jpg\" alt=\"Apple\">\n    </a>\n    <a href=\"images/orange.jpg\" title=\"Orange\">\n        <img src=\"images/thumbnails/orange.jpg\" alt=\"Orange\">\n    </a>\n</div>\n```\n\nAdd the following JavaScript code after including the Gallery script, to display the images in the Gallery lightbox on click of the links:\n\n```html\n<script>\ndocument.getElementById('links').onclick = function (event) {\n    event = event || window.event;\n    var target = event.target || event.srcElement,\n        link = target.src ? target.parentNode : target,\n        options = {index: link, event: event},\n        links = this.getElementsByTagName('a');\n    blueimp.Gallery(links, options);\n};\n</script>\n```\n\n### Controls\nTo initialize the Gallery with visible controls, add the CSS class **blueimp-gallery-controls** to the Gallery widget:\n\n```html\n<div id=\"blueimp-gallery\" class=\"blueimp-gallery blueimp-gallery-controls\">\n    <div class=\"slides\"></div>\n    <h3 class=\"title\"></h3>\n    <a class=\"prev\">‹</a>\n    <a class=\"next\">›</a>\n    <a class=\"close\">×</a>\n    <a class=\"play-pause\"></a>\n    <ol class=\"indicator\"></ol>\n</div>\n```\n\n### Carousel setup\nTo display the images in an inline carousel instead of a lightbox, follow the [lightbox setup](#lightbox-setup) and add the CSS class **blueimp-gallery-carousel** to the Gallery widget and remove the child element with the **close** class, or add a new Gallery widget with a different **id** to your webpage:\n\n```html\n<!-- The Gallery as inline carousel, can be positioned anywhere on the page -->\n<div id=\"blueimp-gallery-carousel\" class=\"blueimp-gallery blueimp-gallery-carousel\">\n    <div class=\"slides\"></div>\n    <h3 class=\"title\"></h3>\n    <a class=\"prev\">‹</a>\n    <a class=\"next\">›</a>\n    <a class=\"play-pause\"></a>\n    <ol class=\"indicator\"></ol>\n</div>\n```\n\nAdd the following JavaScript code after including the Gallery script to initialize the carousel:\n\n```html\n<script>\nblueimp.Gallery(\n    document.getElementById('links').getElementsByTagName('a'),\n    {\n        container: '#blueimp-gallery-carousel',\n        carousel: true\n    }\n);\n</script>\n```\n\n## Keyboard shortcuts\nThe Gallery can be controlled with the following keyboard shortcuts:\n\n* **Return**: Toggle controls visibility.\n* **Esc**: Close the Gallery lightbox.\n* **Space**: Toggle the slideshow (play/pause).\n* **Left**: Move to the previous slide.\n* **Right**: Move to the next slide.\n\nPlease note that setting the **carousel** option to **true** disables the keyboard shortcuts by default.\n\n## Options\n\n### Default options\nThe following are the default options set by the core Gallery library:\n\n```js\nvar options = {\n    // The Id, element or querySelector of the gallery widget:\n    container: '#blueimp-gallery',\n    // The tag name, Id, element or querySelector of the slides container:\n    slidesContainer: 'div',\n    // The tag name, Id, element or querySelector of the title element:\n    titleElement: 'h3',\n    // The class to add when the gallery is visible:\n    displayClass: 'blueimp-gallery-display',\n    // The class to add when the gallery controls are visible:\n    controlsClass: 'blueimp-gallery-controls',\n    // The class to add when the gallery only displays one element:\n    singleClass: 'blueimp-gallery-single',\n    // The class to add when the left edge has been reached:\n    leftEdgeClass: 'blueimp-gallery-left',\n    // The class to add when the right edge has been reached:\n    rightEdgeClass: 'blueimp-gallery-right',\n    // The class to add when the automatic slideshow is active:\n    playingClass: 'blueimp-gallery-playing',\n    // The class for all slides:\n    slideClass: 'slide',\n    // The slide class for loading elements:\n    slideLoadingClass: 'slide-loading',\n    // The slide class for elements that failed to load:\n    slideErrorClass: 'slide-error',\n    // The class for the content element loaded into each slide:\n    slideContentClass: 'slide-content',\n    // The class for the \"toggle\" control:\n    toggleClass: 'toggle',\n    // The class for the \"prev\" control:\n    prevClass: 'prev',\n    // The class for the \"next\" control:\n    nextClass: 'next',\n    // The class for the \"close\" control:\n    closeClass: 'close',\n    // The class for the \"play-pause\" toggle control:\n    playPauseClass: 'play-pause',\n    // The list object property (or data attribute) with the object type:\n    typeProperty: 'type',\n    // The list object property (or data attribute) with the object title:\n    titleProperty: 'title',\n    // The list object property (or data attribute) with the object URL:\n    urlProperty: 'href',\n    // The gallery listens for transitionend events before triggering the\n    // opened and closed events, unless the following option is set to false:\n    displayTransition: true,\n    // Defines if the gallery slides are cleared from the gallery modal,\n    // or reused for the next gallery initialization:\n    clearSlides: true,\n    // Defines if images should be stretched to fill the available space,\n    // while maintaining their aspect ratio (will only be enabled for browsers\n    // supporting background-size=\"contain\", which excludes IE < 9):\n    stretchImages: false,\n    // Toggle the controls on pressing the Return key:\n    toggleControlsOnReturn: true,\n    // Toggle the automatic slideshow interval on pressing the Space key:\n    toggleSlideshowOnSpace: true,\n    // Navigate the gallery by pressing left and right on the keyboard:\n    enableKeyboardNavigation: true,\n    // Close the gallery on pressing the ESC key:\n    closeOnEscape: true,\n    // Close the gallery when clicking on an empty slide area:\n    closeOnSlideClick: true,\n    // Close the gallery by swiping up or down:\n    closeOnSwipeUpOrDown: true,\n    // Emulate touch events on mouse-pointer devices such as desktop browsers:\n    emulateTouchEvents: true,\n    // Hide the page scrollbars: \n    hidePageScrollbars: true,\n    // Stops any touches on the container from scrolling the page:\n    disableScroll: true,\n    // Carousel mode (shortcut for carousel specific options):\n    carousel: false,\n    // Allow continuous navigation, moving from last to first\n    // and from first to last slide:\n    continuous: true,\n    // Remove elements outside of the preload range from the DOM:\n    unloadElements: true,\n    // Start with the automatic slideshow:\n    startSlideshow: false,\n    // Delay in milliseconds between slides for the automatic slideshow:\n    slideshowInterval: 5000,\n    // The starting index as integer.\n    // Can also be an object of the given list,\n    // or an equal object with the same url property:\n    index: 0,\n    // The number of elements to load around the current index:\n    preloadRange: 2,\n    // The transition speed between slide changes in milliseconds:\n    transitionSpeed: 400,\n    // The transition speed for automatic slide changes, set to an integer\n    // greater 0 to override the default transition speed:\n    slideshowTransitionSpeed: undefined,\n    // The event object for which the default action will be canceled\n    // on Gallery initialization (e.g. the click event to open the Gallery):\n    event: undefined,\n    // Callback function executed when the Gallery is initialized.\n    // Is called with the gallery instance as \"this\" object:\n    onopen: undefined,\n    // Callback function executed when the Gallery has been initialized\n    // and the initialization transition has been completed.\n    // Is called with the gallery instance as \"this\" object:\n    onopened: undefined,\n    // Callback function executed on slide change.\n    // Is called with the gallery instance as \"this\" object and the\n    // current index and slide as arguments:\n    onslide: undefined,\n    // Callback function executed after the slide change transition.\n    // Is called with the gallery instance as \"this\" object and the\n    // current index and slide as arguments:\n    onslideend: undefined,\n    // Callback function executed on slide content load.\n    // Is called with the gallery instance as \"this\" object and the\n    // slide index and slide element as arguments:\n    onslidecomplete: undefined,\n    // Callback function executed when the Gallery is about to be closed.\n    // Is called with the gallery instance as \"this\" object:\n    onclose: undefined,\n    // Callback function executed when the Gallery has been closed\n    // and the closing transition has been completed.\n    // Is called with the gallery instance as \"this\" object:\n    onclosed: undefined\n};\n```\n\n### Event callbacks\nEvent callbacks can be set as function properties of the options object passed to the Gallery initialization function:\n\n```js\nvar gallery = blueimp.Gallery(\n    linkList,\n    {\n        onopen: function () {\n            // Callback function executed when the Gallery is initialized.\n        },\n        onopened: function () {\n            // Callback function executed when the Gallery has been initialized\n            // and the initialization transition has been completed.\n        },\n        onslide: function (index, slide) {\n            // Callback function executed on slide change.\n        },\n        onslideend: function (index, slide) {\n            // Callback function executed after the slide change transition.\n        },\n        onslidecomplete: function (index, slide) {\n            // Callback function executed on slide content load.\n        },\n        onclose: function () {\n            // Callback function executed when the Gallery is about to be closed.\n        },\n        onclosed: function () {\n            // Callback function executed when the Gallery has been closed\n            // and the closing transition has been completed.\n        }\n    }\n);\n```\n\n### Carousel options\nIf the **carousel** option is **true**, the following options are set to different default values:\n\n```js\nvar carouselOptions = {\n    hidePageScrollbars: false,\n    toggleControlsOnReturn: false,\n    toggleSlideshowOnSpace: false,\n    enableKeyboardNavigation: false,\n    closeOnEscape: false,\n    closeOnSlideClick: false,\n    closeOnSwipeUpOrDown: false,\n    disableScroll: false,\n    startSlideshow: true\n};\n```\n\nThe options object passed to the Gallery function extends the default options and also those options set via **carousel** mode.\n\n### Indicator options\nThe following are the additional default options set for the slide position indicator:\n\n```js\nvar indicatorOptions = {\n    // The tag name, Id, element or querySelector of the indicator container:\n    indicatorContainer: 'ol',\n    // The class for the active indicator:\n    activeIndicatorClass: 'active',\n    // The list object property (or data attribute) with the thumbnail URL,\n    // used as alternative to a thumbnail child element:\n    thumbnailProperty: 'thumbnail',\n    // Defines if the gallery indicators should display a thumbnail:\n    thumbnailIndicators: true\n};\n```\n\n### Fullscreen options\nThe following are the additional default options set for the fullscreen mode:\n\n```js\nvar fullscreenOptions = {\n    // Defines if the gallery should open in fullscreen mode:\n    fullScreen: false\n};\n```\n\n### Video factory options\nThe following are the additional default options set for the video factory:\n\n```js\nvar videoFactoryOptions = {\n    // The class for video content elements:\n    videoContentClass: 'video-content',\n    // The class for video when it is loading:\n    videoLoadingClass: 'video-loading',\n    // The class for video when it is playing:\n    videoPlayingClass: 'video-playing',\n    // The list object property (or data attribute) for the video poster URL:\n    videoPosterProperty: 'poster',\n    // The list object property (or data attribute) for the video sources array:\n    videoSourcesProperty: 'sources'\n};\n```\n\n### Container and element options\nThe widget **container** option can be set as id string (with \"#\" as prefix) or element node, so the following are equivalent:\n\n```js\nvar options = {\n    container: '#blueimp-gallery'\n};\n```\n\n```js\nvar options = {\n    container: document.getElementById('blueimp-gallery')\n};\n```\n\nThe **slidesContainer**, **titleElement** and **indicatorContainer** options can also be defined using a tag name, which selects the first tag of this kind found inside of the widget container:\n\n```js\nvar options = {\n    slidesContainer: 'div',\n    titleElement: 'h3',\n    indicatorContainer: 'ol'\n};\n```\n\nIt is also possible to define the container and element options with a more complex [querySelector](https://developer.mozilla.org/en-US/docs/Web/API/document.querySelector), which is supported by IE8+ and all modern web browsers.\n\nIf the helper script is replaced with [jQuery](http://jquery.com/), the container and element options can be any valid jQuery selector.\n\n### Property options\nThe options ending with \"Property\" define how the properties of each link element are accessed.  \nFor example, the **urlProperty** is by default set to **href**. This allows to define link elements with **href** or **data-href** attributes:\n\n```html\n<div id=\"links\">\n    <a href=\"images/banana.jpg\">Banana</a>\n    <a data-href=\"images/apple.jpg\">Apple</a>\n</div>\n```\n\nIf the links are passed as JavaScript array, it is also possible to define nested property names, by using the native JavaScript accessor syntax for the property string:\n\n```js\nblueimp.Gallery(\n    [\n        {\n            data: {urls: ['http://example.org/images/banana.jpg']}\n        },\n        {\n            data: {urls: ['http://example.org/images/apple.jpg']}\n        }\n    ],\n    {\n        urlProperty: 'data.urls[0]'\n    }\n);\n```\n\n## API\n\n### Initialization\nThe blueimp Gallery can be initialized by simply calling it as a function with an array of links as first argument and an optional options object as second argument:\n\n```js\nvar gallery = blueimp.Gallery(links, options);\n```\n\nThe links array can be a list of URL strings or a list of objects with URL properties:\n\n```js\nvar gallery = blueimp.Gallery([\n    'http://example.org/images/banana.jpg',\n    'http://example.org/images/apple.jpg',\n    'http://example.org/images/orange.jpg'\n]);\n```\n\n```js\nvar gallery = blueimp.Gallery([\n    {\n        title: 'Banana',\n        href: 'http://example.org/images/banana.jpg',\n        type: 'image/jpeg',\n        thumbnail: 'http://example.org/thumbnails/banana.jpg'\n    },\n    {\n        title: 'Apple',\n        href: 'http://example.org/images/apple.jpg',\n        type: 'image/jpeg',\n        thumbnail: 'http://example.org/thumbnails/apple.jpg'\n    }\n]);\n```\n\nThe URL property name defined by each list object can be configured via the **urlProperty** option. By default, it is set to **href**, which allows to pass a list of HTML link elements as first argument.\n\nThe object returned by executing the Gallery function (the **gallery** variable in the example code above) is a new instance of the Gallery and allows to access the public [API methods](#api-methods) provided by the Gallery.  \nThe Gallery initialization function returns **false** if the given list was empty, the Gallery widget is missing, or the browser doesn't pass the functionality test.\n\n### API methods\nThe Gallery object returned by executing the Gallery function provides the following public API methods:\n\n```js\n// Return the current slide index position:\nvar pos = gallery.getIndex();\n\n// Return the total number of slides:\nvar count = gallery.getNumber();\n\n// Move to the previous slide:\ngallery.prev();\n\n// Move to the next slide:\ngallery.next();\n\n// Move to the given slide index with the (optional) given duraction speed in milliseconds:\ngallery.slide(index, duration);\n\n// Start an automatic slideshow with the given interval in milliseconds (optional):\ngallery.play(interval);\n\n// Stop the automatic slideshow:\ngallery.pause();\n\n// Add additional slides after Gallery initialization:\ngallery.add(list);\n\n// Close and deinitialize the Gallery:\ngallery.close();\n```\n\n### Videos\nThe Gallery can be initialized with a list of videos instead of images, or a combination of both:\n\n```js\nblueimp.Gallery([\n    {\n        title: 'Fruits',\n        href: 'http://example.org/videos/fruits.mp4',\n        type: 'video/mp4',\n        poster: 'http://example.org/images/fruits.jpg'\n    },\n    {\n        title: 'Banana',\n        href: 'http://example.org/images/banana.jpg',\n        type: 'image/jpeg',\n        thumbnail: 'http://example.org/thumbnails/banana.jpg'\n    }\n]);\n```\n\nThe Gallery uses the **type** property to determine the content type of the object to display.  \nIf the type property is empty or doesn't exist, the default type **image** is assumed.\n\nFor images, the **thumbnail** property defines the URL of the image thumbnail, which is used for the indicator navigation displayed at the bottom of the Gallery, if the controls are visible.\n\nFor videos, the **poster** property defines the URL of the poster image to display, before the video is started.\n\n#### Multiple video sources\nTo provide multiple video formats, the **sources** property of a list object can be set to an array of objects with **href** and **type** properties for each video source. The first video format in the list that the browser can play will be displayed:\n\n```js\nblueimp.Gallery([\n    {\n        title: 'Fruits',\n        type: 'video/*',\n        poster: 'http://example.org/images/fruits.jpg',\n        sources: [\n            {\n                href: 'http://example.org/videos/fruits.mp4',\n                type: 'video/mp4'\n            },\n            {\n                href: 'http://example.org/videos/fruits.ogg',\n                type: 'video/ogg'\n            }\n        ]\n    }\n]);\n```\n\nIt is also possible to define the video sources as data-attribute on a link element in [JSON](https://developer.mozilla.org/en-US/docs/JSON) array format:\n\n```html\n<div id=\"links\">\n    <a\n        href=\"http://example.org/videos/fruits.mp4\"\n        title=\"Fruits\"\n        type=\"video/mp4\"\n        data-poster=\"http://example.org/images/fruits.jpg\"\n        data-sources='[{\"href\": \"http://example.org/videos/fruits.mp4\", \"type\": \"video/mp4\"}, {\"href\": \"http://example.org/videos/fruits.ogg\", \"type\": \"video/ogg\"}]'\n    >Fruits</a>\n</div>\n```\n\n### Additional Gallery elements\nIt is possible to add additional elements to the Gallery widget, e.g. a description label.\n\nFirst, add the desired HTML element to the Gallery widget:\n\n```html\n<div id=\"blueimp-gallery\" class=\"blueimp-gallery\">\n    <div class=\"slides\"></div>\n    <h3 class=\"title\"></h3>\n    <!-- The placeholder for the description label: -->\n    <p class=\"description\"></p>\n    <a class=\"prev\">‹</a>\n    <a class=\"next\">›</a>\n    <a class=\"close\">×</a>\n    <a class=\"play-pause\"></a>\n    <ol class=\"indicator\"></ol>\n</div>\n```\n\nNext, add the desired element styles to your CSS file:\n\n```css\n.blueimp-gallery > .description {\n  position: absolute;\n  top: 30px;\n  left: 15px;\n  color: #fff;\n  display: none;\n}\n.blueimp-gallery-controls > .description {\n  display: block;\n}\n```\n\nThen, add the additional element information to each of your links:\n\n```html\n<div id=\"links\">\n    <a href=\"images/banana.jpg\" title=\"Banana\" data-description=\"This is a banana.\">Banana</a>\n    <a href=\"images/apple.jpg\" title=\"Apple\" data-description=\"This is an apple.\">Apple</a>\n</div>\n```\n\nFinally, initialize the Gallery with an onslide callback option, to set the element content based on the information from the current link:\n\n```js\nblueimp.Gallery(\n    document.getElementById('links'),\n    {\n        onslide: function (index, slide) {\n            var text = this.list[index].getAttribute('data-description'),\n                node = this.container.find('.description');\n            node.empty();\n            if (text) {\n                node[0].appendChild(document.createTextNode(text));\n            }\n        }\n    }\n);\n```\n\n### Additional content types\nBy extending the Gallery prototype with new factory methods, additional content types can be displayed.  By default, blueimp Gallery provides the **imageFactory** and **videoFactory** methods for **image** and **video** content types respectively.  \n\nThe Gallery uses the **type** property of each content object to determine which factory method to use.  The **type** defines the [Internet media type](http://en.wikipedia.org/wiki/Internet_media_type) of the content object and is composed of two or more parts: A type, a subtype, and zero or more optional parameters, e.g. **text/html; charset=UTF-8** for an HTML document with UTF-8 encoding.  \nThe main type (the string in front of the slash, **text** in the example above) is concatenated with the string **Factory** to create the factory method name, e.g. **textFactory**.\n\n#### Example HTML text factory implementation\nPlease note that although blueimp Gallery doesn't require [jQuery](http://jquery.com/), the following example uses it for convenience.\n\nExtend the Gallery prototype with the **textFactory** method:\n\n```js\nblueimp.Gallery.prototype.textFactory = function (obj, callback) {\n    var $element = $('<div>')\n            .addClass('text-content')\n            .attr('title', obj.title);\n    $.get(obj.href)\n        .done(function (result) {\n            $element.html(result);\n            callback({\n                type: 'load',\n                target: $element[0]\n            });\n        })\n        .fail(function () {\n            callback({\n                type: 'error',\n                target: $element[0]\n            });\n        });\n    return $element[0];\n};\n```\n\nAdd the **text-content** class to the Gallery CSS:\n\n```css\n.blueimp-gallery > .slides > .slide > .text-content {\n    overflow: auto;\n    margin: 60px auto;\n    padding: 0 60px;\n    max-width: 920px;\n    text-align: left;\n}\n```\n\nWith the previous changes in place, the Gallery can now handle HTML content types:\n\n```js\nblueimp.Gallery([\n    {\n        title: 'Noodle soup',\n        href: 'http://example.org/text/noodle-soup.html',\n        type: 'text/html'\n    },\n    {\n        title: 'Tomato salad',\n        href: 'http://example.org/text/tomato-salad.html',\n        type: 'text/html'\n    }\n]);\n```\n\n### jQuery plugin\n\n#### jQuery plugin setup\nThe blueimp Gallery jQuery plugin registers a global click handler to open links with **data-gallery** attribute in the Gallery lightbox.\n\nTo use it, follow the [lightbox setup](#lightbox-setup) guide, but replace the minified Gallery script with the jQuery plugin version and include it after including [jQuery](http://jquery.com/):\n\n```html\n<script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\"></script>\n<script src=\"js/jquery.blueimp-gallery.min.js\"></script>\n```\n\nNext, add the attribute **data-gallery** to your Gallery links:\n\n```html\n<div id=\"links\">\n    <a href=\"images/banana.jpg\" title=\"Banana\" data-gallery>\n        <img src=\"images/thumbnails/banana.jpg\" alt=\"Banana\">\n    </a>\n    <a href=\"images/apple.jpg\" title=\"Apple\" data-gallery>\n        <img src=\"images/thumbnails/apple.jpg\" alt=\"Apple\">\n    </a>\n    <a href=\"images/orange.jpg\" title=\"Orange\" data-gallery>\n        <img src=\"images/thumbnails/orange.jpg\" alt=\"Orange\">\n    </a>\n</div>\n```\n\nThe onclick handler from the [lightbox setup](#lightbox-setup) guide is not required and can be removed.\n\n#### HTML5 data-attributes\nOptions for the Gallery lightbox opened via the jQuery plugin can be defined as [HTML5 data-attributes](http://api.jquery.com/data/#data-html5) on the Gallery widget container.\n\nThe jQuery plugin also introduces the additional **filter** option, which is applied to the Gallery links via [jQuery's filter method](http://api.jquery.com/filter/) and allows to remove duplicates from the list:\n\n```html\n<div id=\"blueimp-gallery\" class=\"blueimp-gallery\" data-start-slideshow=\"true\" data-filter=\":even\">\n    <div class=\"slides\"></div>\n    <h3 class=\"title\"></h3>\n    <a class=\"prev\">‹</a>\n    <a class=\"next\">›</a>\n    <a class=\"close\">×</a>\n    <a class=\"play-pause\"></a>\n    <ol class=\"indicator\"></ol>\n</div>\n```\n\nThis will initialize the Gallery with the option **startSlideshow** set to **true**.  \nIt will also filter the Gallery links so that only links with an even index number will be included.\n\n#### Container ids and link grouping\nIf the **data-gallery** attribute value is a valid id string (e.g. \"#blueimp-gallery\"), it is used as container option.  \nSetting **data-gallery** to a non-empty string also allows to group links into different sets of Gallery images:\n\n```html\n<div id=\"fruits\">\n    <a href=\"images/banana.jpg\" title=\"Banana\" data-gallery=\"#blueimp-gallery-fruits\">\n        <img src=\"images/thumbnails/banana.jpg\" alt=\"Banana\">\n    </a>\n    <a href=\"images/apple.jpg\" title=\"Apple\" data-gallery=\"#blueimp-gallery-fruits\">\n        <img src=\"images/thumbnails/apple.jpg\" alt=\"Apple\">\n    </a>\n</div>\n<div id=\"vegetables\">\n    <a href=\"images/tomato.jpg\" title=\"Tomato\" data-gallery=\"#blueimp-gallery-vegetables\">\n        <img src=\"images/thumbnails/tomato.jpg\" alt=\"Tomato\">\n    </a>\n    <a href=\"images/onion.jpg\" title=\"Onion\" data-gallery=\"#blueimp-gallery-vegetables\">\n        <img src=\"images/thumbnails/onion.jpg\" alt=\"Onion\">\n    </a>\n</div>\n```\n\nThis will open the links with the **data-gallery** attribute **#blueimp-gallery-fruits** in the Gallery widget with the id **blueimp-gallery-fruits**, and the links with the **data-gallery** attribute **#blueimp-gallery-vegetables**  in the Gallery widget with the id **blueimp-gallery-vegetables**.\n\n#### Gallery object\nThe gallery object is stored via [jQuery data storage](http://api.jquery.com/category/miscellaneous/data-storage/) on the Gallery widget when the Gallery is opened and can be retrieved the following way:\n\n```js\nvar gallery = $('#blueimp-gallery').data('gallery');\n```\n\nThis gallery object provides all methods outlined in the API methods section.\n\n#### jQuery events\nThe jQuery plugin triggers Gallery events on the widget container, with event names equivalent to the gallery [event callbacks](#event-callbacks):\n\n```js\n$('#blueimp-gallery')\n    .on('open', function (event) {\n        // Gallery open event handler\n    })\n    .on('opened', function (event) {\n        // Gallery opened event handler\n    })\n    .on('slide', function (event, index, slide) {\n        // Gallery slide event handler\n    })\n    .on('slideend', function (event, index, slide) {\n        // Gallery slideend event handler\n    })\n    .on('slidecomplete', function (event, index, slide) {\n        // Gallery slidecomplete event handler\n    })\n    .on('close', function (event) {\n        // Gallery close event handler\n    })\n    .on('closed', function (event) {\n        // Gallery closed event handler\n    });\n```\n\n## Requirements\nblueimp Gallery doesn't require any other libraries and can be used standalone without any dependencies.\n\nYou can also use the individual source files instead of the standalone minified version:\n\n```html\n<link rel=\"stylesheet\" href=\"css/blueimp-gallery.css\">\n<link rel=\"stylesheet\" href=\"css/blueimp-gallery-indicator.css\">\n<link rel=\"stylesheet\" href=\"css/blueimp-gallery-video.css\">\n<!-- ... -->\n<script src=\"js/blueimp-helper.js\"></script>\n<script src=\"js/blueimp-gallery.js\"></script>\n<script src=\"js/blueimp-gallery-fullscreen.js\"></script>\n<script src=\"js/blueimp-gallery-indicator.js\"></script>\n<script src=\"js/blueimp-gallery-video.js\"></script>\n```\n\nThe helper script can be replaced by [jQuery](http://jquery.com/) v. 1.7+.  \nThe fullscreen, indicator and video source files are optional if their functionality is not required.\n\nThe [jQuery plugin](#jquery-plugin) requires [jQuery](http://jquery.com/) v. 1.7+ and the basic Gallery script, while the fullscreen, indicator and video source files are also optional:\n\n```html\n<script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\"></script>\n<script src=\"js/blueimp-gallery.js\"></script>\n<script src=\"js/blueimp-gallery-fullscreen.js\"></script>\n<script src=\"js/blueimp-gallery-indicator.js\"></script>\n<script src=\"js/blueimp-gallery-video.js\"></script>\n<script src=\"js/jquery.blueimp-gallery.js\"></script>\n```\n\nPlease note that the jQuery plugin is an optional extension and not required for the Gallery functionality.\n\n## Browsers\nblueimp Gallery has been tested with and supports the following browsers:\n\n### Desktop browsers\n\n* Google Chrome 14.0+\n* Apple Safari 4.0+\n* Mozilla Firefox 4.0+\n* Opera 10.0+\n* Microsoft Internet Explorer 7.0+\n\n### Mobile browsers\n\n* Apple Safari on iOS 6.0+\n* Google Chrome on iOS 6.0+\n* Google Chrome on Android 4.0+\n* Default Browser on Android 2.3+\n* Opera Mobile 12.0+\n\n## License\nReleased under the [MIT license](http://www.opensource.org/licenses/MIT).\n\n## Credits\nThe swipe implementation is based on code from the [Swipe](http://swipejs.com/) library.\n",
  "readmeFilename": "README.md",
  "_id": "blueimp-gallery@2.9.0"
}